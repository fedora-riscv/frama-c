--- ./src/postdominators/print.ml.orig	2013-06-11 08:13:13.000000000 -0600
+++ ./src/postdominators/print.ml	2014-02-25 12:00:00.000000000 -0700
@@ -63,7 +63,7 @@ module Printer = struct
 
   let graph_attributes (title, _) = [`Label title]
 
-  let default_vertex_attributes _g = [`Style `Filled]
+  let default_vertex_attributes _g = [`Style [`Filled]]
   let default_edge_attributes _g = []
 
   let vertex_attributes (s, has_postdom) =
--- ./src/logic/property_status.ml.orig	2013-06-11 08:13:39.000000000 -0600
+++ ./src/logic/property_status.ml	2014-02-25 12:00:00.000000000 -0700
@@ -1427,21 +1427,21 @@ module Consolidation_graph = struct
                 let s = get_status p in
 		let color = status_color p s in
                 let style = match s with
-                  | Never_tried -> [`Style `Bold; `Width 0.8 ]
-                  | _ -> [`Style `Filled]
+                  | Never_tried -> [`Style [`Bold]; `Width 0.8 ]
+                  | _ -> [`Style [`Filled]]
                 in
 		style @ [ label v; `Color color; `Shape `Box ]
               | Emitter _ as v -> 
-		[ label v; `Shape `Diamond; `Color 0xb0c4de; `Style `Filled ]
+		[ label v; `Shape `Diamond; `Color 0xb0c4de; `Style [`Filled] ]
               | Tuning_parameter _ as v ->
-		[ label v; (*`Style `Dotted;*) `Color 0xb0c4de;  ]
+		[ label v; (*`Style [`Dotted];*) `Color 0xb0c4de;  ]
 	      | Correctness_parameter _ (*as v*) -> assert false (*[ label v; `Color 0xb0c4de ]*)
 
 	    let edge_attributes e = match E.label e with
 	      | None -> []
 	      | Some s ->
 		let c = emitted_status_color s in
-		[ `Color c; `Fontcolor c; `Style `Bold ]
+		[ `Color c; `Fontcolor c; `Style [`Bold] ]
 
         let default_vertex_attributes _ = []
         let default_edge_attributes _ = []
--- ./src/semantic_callgraph/register.ml.orig	2013-06-11 08:13:09.000000000 -0600
+++ ./src/semantic_callgraph/register.ml	2014-02-25 12:00:00.000000000 -0700
@@ -103,8 +103,8 @@ module Service =
          let name = Kernel_function.get_name
          let attributes v =
            [ `Style
-               (if Kernel_function.is_definition v then `Bold
-                else `Dotted) ]
+               (if Kernel_function.is_definition v then [`Bold]
+                else [`Dotted]) ]
          let entry_point () =
            try Some (fst (Globals.entry_point ()))
            with Globals.No_such_entry_point _ -> None
--- ./src/misc/service_graph.ml.orig	2013-06-11 08:13:49.000000000 -0600
+++ ./src/misc/service_graph.ml	2014-02-25 12:00:00.000000000 -0700
@@ -289,7 +289,7 @@ Src root:%s in %s (is_root:%b) Dst:%s in
         color e
       else
         match CallG.E.label e with
-        | Inter_services -> [ `Style `Invis ]
+        | Inter_services -> [ `Style [`Invis] ]
         | Inter_functions | Both -> color e
 
     let default_edge_attributes _ = []
@@ -302,7 +302,8 @@ Src root:%s in %s (is_root:%b) Dst:%s in
           sg_attributes =
             [ `Label ("S " ^ cs);
               `Color (Extlib.number_to_color id);
-              `Style `Bold ] }
+              `Style [`Bold] ];
+          sg_parent = None }
 
   end
 
--- ./src/syntactic_callgraph/register.ml.orig	2013-06-11 08:13:52.000000000 -0600
+++ ./src/syntactic_callgraph/register.ml	2014-02-25 12:00:00.000000000 -0700
@@ -37,8 +37,8 @@ module Service =
          let name v = nodeName v.cnInfo
          let attributes v =
            [ match v.cnInfo with
-             | NIVar (_,b) when not !b -> `Style `Dotted
-             | _ -> `Style `Bold ]
+             | NIVar (_,b) when not !b -> `Style [`Dotted]
+             | _ -> `Style [`Bold] ]
          let equal v1 v2 = id v1 = id v2
 	 let compare v1 v2 = 
 	   let i1 = id v1 in
--- ./src/pdg_types/pdgTypes.ml.orig	2013-06-11 08:13:49.000000000 -0600
+++ ./src/pdg_types/pdgTypes.ml	2014-02-25 12:00:00.000000000 -0700
@@ -624,7 +624,7 @@ module Pdg = struct
 
     let graph_attributes _ = [`Rankdir `TopToBottom ]
 
-    let default_vertex_attributes _ = [`Style `Filled]
+    let default_vertex_attributes _ = [`Style [`Filled]]
     let vertex_name v = string_of_int (Node.id v)
 
     let vertex_attributes v =
@@ -709,15 +709,16 @@ module Pdg = struct
         if Dpd.is_ctrl d then (`Arrowtail `Odot)::attrib else attrib
       in
       let attrib =
-        if Dpd.is_addr d then (`Style `Dotted)::attrib else attrib
+        if Dpd.is_addr d then (`Style [`Dotted])::attrib else attrib
       in
         attrib
 
     let get_subgraph v =
       let mk_subgraph name attrib =
-        let attrib = (`Style `Filled) :: attrib in
+        let attrib = (`Style [`Filled]) :: attrib in
         Some { Graph.Graphviz.DotAttributes.sg_name= name;
-               Graph.Graphviz.DotAttributes.sg_attributes = attrib }
+               Graph.Graphviz.DotAttributes.sg_attributes = attrib;
+               Graph.Graphviz.DotAttributes.sg_parent = None }
       in
       match Node.elem_key v with
       | Key.CallStmt call | Key.SigCallKey (call, _) ->
--- ./src/wp/cil2cfg.ml.orig	2013-06-11 08:13:33.000000000 -0600
+++ ./src/wp/cil2cfg.ml	2014-02-25 12:00:00.000000000 -0700
@@ -1259,8 +1259,8 @@ module Printer (PE : sig val edge_txt :
       | Vstart | Vend | Vexit -> [`Color 0x0000FF; `Shape `Doublecircle]
       | VfctIn | VfctOut -> [`Color 0x0000FF; `Shape `Box]
       | VblkIn _ | VblkOut _ -> [`Shape `Box]
-      | Vloop _ | Vloop2 _ -> [`Color 0xFF0000; `Style `Filled]
-      | Vtest _ | Vswitch _ -> [`Color 0x00FF00; `Style `Filled; `Shape `Diamond]
+      | Vloop _ | Vloop2 _ -> [`Color 0xFF0000; `Style [`Filled]]
+      | Vtest _ | Vswitch _ -> [`Color 0x00FF00; `Style [`Filled]; `Shape `Diamond]
       | Vcall _ | Vstmt _ -> []
     in (`Label (String.escaped label))::attr
 
@@ -1270,15 +1270,15 @@ module Printer (PE : sig val edge_txt :
     let attr = [] in
     let attr = (`Label (String.escaped (PE.edge_txt e)))::attr in
     let attr =
-      if is_back_edge e then (`Constraint false)::(`Style `Bold)::attr
+      if is_back_edge e then (`Constraint false)::(`Style [`Bold])::attr
       else attr
     in
     let attr = match (edge_type e) with
       | Ethen | EbackThen -> (`Color 0x00FF00)::attr
       | Eelse | EbackElse -> (`Color 0xFF0000)::attr
-      | Ecase [] -> (`Color 0x0000FF)::(`Style `Dashed)::attr
+      | Ecase [] -> (`Color 0x0000FF)::(`Style [`Dashed])::attr
       | Ecase _ -> (`Color 0x0000FF)::attr
-      | Enext -> (`Style `Dotted)::attr
+      | Enext -> (`Style [`Dotted])::attr
       | Eback -> attr (* see is_back_edge above *)
       | Enone -> attr
     in
@@ -1288,9 +1288,10 @@ module Printer (PE : sig val edge_txt :
 
   let get_subgraph v =
      let mk_subgraph name attrib =
-      let attrib = (`Style `Filled) :: attrib in
+      let attrib = (`Style [`Filled]) :: attrib in
           Some { Graph.Graphviz.DotAttributes.sg_name= name;
-                 Graph.Graphviz.DotAttributes.sg_attributes = attrib }
+                 Graph.Graphviz.DotAttributes.sg_attributes = attrib;
+                 Graph.Graphviz.DotAttributes.sg_parent = None }
     in
        match node_type (V.label v) with
          | Vcall (s,_,_,_) ->
--- ./src/impact/reason_graph.ml.orig	2013-06-11 08:13:52.000000000 -0600
+++ ./src/impact/reason_graph.ml	2014-02-25 12:00:00.000000000 -0700
@@ -81,7 +81,7 @@ module Printer = struct
 
   let graph_attributes _ = [`Label "Impact graph"]
 
-  let default_vertex_attributes _g = [`Style `Filled]
+  let default_vertex_attributes _g = [`Style [`Filled]]
   let default_edge_attributes _g = []
 
   let vertex_attributes v =
@@ -112,6 +112,7 @@ module Printer = struct
         let attrs = {
           Graph.Graphviz.DotAttributes.sg_name = name;
           sg_attributes = [`Label name];
+          sg_parent = None
         } in
         Some attrs
         
--- ./src/kernel/stmts_graph.ml.orig	2013-06-11 08:13:13.000000000 -0600
+++ ./src/kernel/stmts_graph.ml	2014-02-25 12:00:00.000000000 -0700
@@ -139,12 +139,12 @@ module TP = struct
 
   let vertex_attributes s =
     match s.skind with
-    | Loop _ -> [`Color 0xFF0000; `Style `Filled]
-    | If _ -> [`Color 0x00FF00; `Style `Filled; `Shape `Diamond]
-    | Return _ -> [`Color 0x0000FF; `Style `Filled]
+    | Loop _ -> [`Color 0xFF0000; `Style [`Filled]]
+    | If _ -> [`Color 0x00FF00; `Style [`Filled]; `Shape `Diamond]
+    | Return _ -> [`Color 0x0000FF; `Style [`Filled]]
     | Block _ -> [`Shape `Box; `Fontsize 8]
-    | Goto _ -> [`Shape `Diamond; `Color 0x00FFFF ; `Style `Filled]
-    | Instr (Skip _) -> [`Color 0x00FFFF ; `Style `Filled]
+    | Goto _ -> [`Shape `Diamond; `Color 0x00FFFF ; `Style [`Filled]]
+    | Instr (Skip _) -> [`Color 0x00FFFF ; `Style [`Filled]]
     | _ -> []
   let default_vertex_attributes _ = []
 
--- ./src/slicing/printSlice.ml.orig	2013-06-11 08:13:35.000000000 -0600
+++ ./src/slicing/printSlice.ml	2014-02-25 12:00:00.000000000 -0700
@@ -227,7 +227,7 @@ module PrintProject = struct
 
   let graph_attributes (name, _) = [`Label name]
 
-  let default_vertex_attributes _ = [`Style `Filled]
+  let default_vertex_attributes _ = [`Style [`Filled]]
 
   let vertex_name v = match v with
     | Src fi -> SlicingMacros.fi_name fi
@@ -280,18 +280,19 @@ module PrintProject = struct
 
   let edge_attributes (e, call) =
     let attrib = match e with
-    | (Src _, Src _) -> [`Style `Invis]
-    | (OptSliceCallers _, _) -> [`Style `Invis]
-    | (_, OptSliceCallers _) -> [`Style `Invis]
+    | (Src _, Src _) -> [`Style [`Invis]]
+    | (OptSliceCallers _, _) -> [`Style [`Invis]]
+    | (_, OptSliceCallers _) -> [`Style [`Invis]]
     | _ -> []
     in match call with None -> attrib
       | Some call -> (`Label (string_of_int call.sid)):: attrib
 
   let get_subgraph v =
     let mk_subgraph name attrib =
-      let attrib = (*(`Label name) ::*) (`Style `Filled) :: attrib in
+      let attrib = (*(`Label name) ::*) (`Style [`Filled]) :: attrib in
           Some { Graph.Graphviz.DotAttributes.sg_name= name;
-                 Graph.Graphviz.DotAttributes.sg_attributes = attrib }
+                 Graph.Graphviz.DotAttributes.sg_attributes = attrib;
+                 Graph.Graphviz.DotAttributes.sg_parent = None }
     in
     let f_subgraph fi =
       let name = SlicingMacros.fi_name fi in
