--- ./src/semantic_callgraph/register.ml.orig	2011-10-10 02:38:07.000000000 -0600
+++ ./src/semantic_callgraph/register.ml	2012-08-01 14:11:13.636345972 -0600
@@ -107,6 +107,7 @@ module Service =
                (if Kernel_function.is_definition v then `Bold
                 else `Dotted) ]
          let equal = Kernel_function.equal
+         let compare v1 v2 = Datatype.Int.compare (id v1) (id v2)
          let hash = Kernel_function.hash
          let entry_point () =
            try Some (fst (Globals.entry_point ()))
--- ./src/syntactic_callgraph/register.ml.orig	2011-10-10 02:38:30.000000000 -0600
+++ ./src/syntactic_callgraph/register.ml	2012-08-01 14:11:49.985347173 -0600
@@ -41,6 +41,7 @@ module Service =
              | NIVar (_,b) when not !b -> `Style `Dotted
              | _ -> `Style `Bold ]
          let equal v1 v2 = id v1 = id v2
+         let compare v1 v2 = Datatype.Int.compare (id v1) (id v2)
          let hash = id
          let entry_point () = !entry_point_ref
        end
--- ./src/misc/service_graph.mli.orig	2011-10-10 02:38:28.000000000 -0600
+++ ./src/misc/service_graph.mli	2012-08-01 14:10:29.025344420 -0600
@@ -28,7 +28,7 @@ module Make
   (G: sig
      type t
      module V: sig
-       include Graph.Sig.HASHABLE
+       include Graph.Sig.COMPARABLE
        val id: t -> int
          (** assume is >= 0 and unique for each vertices of the graph *)
        val name: t -> string
--- ./src/misc/service_graph.ml.orig	2011-10-10 02:38:28.000000000 -0600
+++ ./src/misc/service_graph.ml	2012-08-01 14:10:09.873343768 -0600
@@ -24,7 +24,7 @@ module Make
   (G: sig
      type t
      module V: sig
-       include Graph.Sig.HASHABLE
+       include Graph.Sig.COMPARABLE
        val id: t -> int
        val name: t -> string
        val attributes: t -> Graph.Graphviz.DotAttributes.vertex list
