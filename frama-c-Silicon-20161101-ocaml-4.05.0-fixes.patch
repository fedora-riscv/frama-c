diff -ur frama-c-Silicon-20161101.old/src/kernel_services/analysis/dataflow2.ml frama-c-Silicon-20161101.fixes/src/kernel_services/analysis/dataflow2.ml
--- frama-c-Silicon-20161101.old/src/kernel_services/analysis/dataflow2.ml	2016-12-01 15:09:17.000000000 +0000
+++ frama-c-Silicon-20161101.fixes/src/kernel_services/analysis/dataflow2.ml	2017-09-06 19:03:28.602850460 +0100
@@ -63,7 +63,7 @@
   let stmtStartData = create X.size
   let clear () = clear stmtStartData
   let mem = mem stmtStartData
-  let find = find stmtStartData
+  let find : Cil_types.stmt -> data = find stmtStartData
   let replace = replace stmtStartData
   let add = add stmtStartData
   let iter f = iter f stmtStartData
diff -ur frama-c-Silicon-20161101.old/src/kernel_services/analysis/dataflow.ml frama-c-Silicon-20161101.fixes/src/kernel_services/analysis/dataflow.ml
--- frama-c-Silicon-20161101.old/src/kernel_services/analysis/dataflow.ml	2016-12-01 15:09:19.000000000 +0000
+++ frama-c-Silicon-20161101.fixes/src/kernel_services/analysis/dataflow.ml	2017-09-06 19:03:05.245003131 +0100
@@ -86,7 +86,7 @@
   let stmtStartData = create X.size
   let clear () = clear stmtStartData
   let mem = mem stmtStartData
-  let find = find stmtStartData
+  let find : Cil_types.stmt -> data = find stmtStartData
   let replace = replace stmtStartData
   let add = add stmtStartData
   let iter f = iter f stmtStartData
diff -ur frama-c-Silicon-20161101.old/src/libraries/project/state_builder.ml frama-c-Silicon-20161101.fixes/src/libraries/project/state_builder.ml
--- frama-c-Silicon-20161101.old/src/libraries/project/state_builder.ml	2016-12-01 15:09:05.000000000 +0000
+++ frama-c-Silicon-20161101.fixes/src/libraries/project/state_builder.ml	2017-09-06 19:02:09.230165488 +0100
@@ -744,6 +744,7 @@
     let fold f = HW.fold_sorted (fun v _ acc -> f v acc)
     let iter f = HW.iter_sorted (fun v _ -> f v)
     let mem = HW.mem
+    let find_opt = HW.find_opt
     let find_all = HW.find_all
     let find = HW.find
     let remove = HW.remove
diff -ur frama-c-Silicon-20161101.old/src/libraries/utils/hook.ml frama-c-Silicon-20161101.fixes/src/libraries/utils/hook.ml
--- frama-c-Silicon-20161101.old/src/libraries/utils/hook.ml	2016-12-01 15:09:07.000000000 +0000
+++ frama-c-Silicon-20161101.fixes/src/libraries/utils/hook.ml	2017-09-06 19:00:48.737583727 +0100
@@ -58,7 +58,7 @@
   type param = P.t
   type result = unit
   let hooks = Queue.create ()
-  let extend f = Queue.add f hooks
+  let extend (f : param -> result) = Queue.add f hooks
   let extend_once f = add_once f hooks
 
   let apply arg = Queue.iter (fun f -> f arg) hooks
@@ -78,7 +78,7 @@
   type param = P.t
   type result = P.t
   let hooks = Queue.create ()
-  let extend f = Queue.add f hooks
+  let extend (f : param -> result) = Queue.add f hooks
   let extend_once f = add_once f hooks
   let apply arg = Queue.fold (fun arg f -> f arg) arg hooks
   let is_empty () = Queue.is_empty hooks
diff -ur frama-c-Silicon-20161101.old/src/plugins/wp/qed/src/idxset.ml frama-c-Silicon-20161101.fixes/src/plugins/wp/qed/src/idxset.ml
--- frama-c-Silicon-20161101.old/src/plugins/wp/qed/src/idxset.ml	2016-12-01 15:09:15.000000000 +0000
+++ frama-c-Silicon-20161101.fixes/src/plugins/wp/qed/src/idxset.ml	2017-09-06 18:58:45.058982013 +0100
@@ -72,23 +72,23 @@
   let mem x = Intmap.mem (E.id x)
   let find x = Intmap.find (E.id x)
   let cardinal = Intmap.size
-  let compare = Intmap.compare (fun _ _ -> 0)
-  let equal = Intmap.equal (fun _ _ -> true)
+  let compare : t -> t -> int = Intmap.compare (fun _ _ -> 0)
+  let equal : t -> t -> bool = Intmap.equal (fun _ _ -> true)
 
   let _keep _ x _ = x
   let _keepq _ x _ = Some x
   let _same _ _ _ = true
 
   (* good sharing *)
-  let union = Intmap.union _keep
+  let union : t -> t -> t = Intmap.union _keep
 
   (* good sharing *)
-  let inter = Intmap.interq _keepq
+  let inter : t -> t -> t = Intmap.interq _keepq
 
   (* good sharing *)
-  let diff = Intmap.diffq _keepq
-  let subset = Intmap.subset _same
-  let intersect = Intmap.intersectf _same
+  let diff : t -> t -> t = Intmap.diffq _keepq
+  let subset : t -> t -> bool = Intmap.subset _same
+  let intersect : t -> t -> bool = Intmap.intersectf _same
 
   (* increasing order on id *)
   let iter f = Intmap.iteri (fun _i x -> f x)
@@ -106,7 +106,7 @@
   let exists f = Intmap.exists (fun _i x -> f x)
 
   (* increasing order on id *)
-  let elements = Intmap.mapl (fun _i x -> x)
+  let elements : t -> elt list = Intmap.mapl (fun _i x -> x)
 
   (* good sharing *)
   let mapf f= Intmap.mapq (fun _i x -> f x)
